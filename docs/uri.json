{
  "folders": [
    "design-survey",
    "customize-question-types"
  ],
  "rename": {
    "design-survey-question-titles": "design-survey-configure-question-titles",
    "design-survey-conditional-display": "design-survey-conditional-logic",
    "design-survey-predefine-answers": "design-survey-pre-populate-form-fields",
    "localization": "survey-localization",
    "handle-survey-results-access": "access-and-modify-survey-results",
    "handle-survey-results-store": "how-to-store-survey-results",
    "handle-survey-results-continue-incomplete": "how-to-save-and-restore-incomplete-survey"
  },
  "classRename": {
    "surveymodel": "survey-data-model",
    "pagemodel": "page-model",
    "popupsurveymodel": "pop-up-survey-model",
    "questiontextmodel": "text-entry-question-model",
    "questioncheckboxmodel": "checkbox-question-model",
    "questionrankingmodel": "ranking-question-model",
    "questionradiogroupmodel": "radio-button-question-model",
    "questiondropdownmodel": "dropdown-menu-model",
    "questiontagboxmodel": "dropdown-tag-box-model",
    "questioncommentmodel": "comment-field-model",
    "questionratingmodel": "rating-scale-question-model",
    "questionimagepickermodel": "image-picker-question-model",
    "questionbooleanmodel": "boolean-question-model",
    "questionimagemodel": "add-image-to-survey",
    "questionhtmlmodel": "add-custom-html-to-survey",
    "questionsignaturepadmodel": "signature-pad-model",
    "questionexpressionmodel": "expression-model",
    "questionfilemodel": "file-model",
    "questionmatrixmodel": "matrix-table-question-model",
    "panelmodel": "panel-model",
    "questionpaneldynamicmodel": "dynamic-panel-model",
    "questionmultipletextmodel": "multiple-text-entry-question-model",
    "questionmatrixdynamicmodel": "dynamic-matrix-table-question-model",
    "questionmatrixdropdownmodel": "matrix-table-with-dropdown-list"
  }
}




public class FormsAuthentication : IFormsAuthentication
{
    private readonly IBmsDbUow _bmsDbUow;
    private readonly ApplicationSettings _settings;
    private readonly ILog<FormsAuthentication> _log;

    public FormsAuthentication(IBmsDbUow bmsDbUow, ApplicationSettings settings, ILog<FormsAuthentication> log)
    {
        Check.Argument.IsNotNull(bmsDbUow, "bmsDbUow");
        Check.Argument.IsNotNull(settings, "settings");

        _bmsDbUow = bmsDbUow;
        _settings = settings;
        _log = log;
    }

    public void SignIn(string userId, bool createPersistentCookie)
    {
        Check.Argument.IsNotNullOrEmpty(userId, "userId");

        var response = HttpContext.Current.Response;
        var request = HttpContext.Current.Request;
        // Creating and setting TrueClientIP variable to be set when available
        string TrueClientIP = EQ.EquitableHealth.Web.Constants.CookieNames.TrueClientIP;

        if (request.Headers["True-Client-IP"] != null)
        {
            TrueClientIP = request.Headers["True-Client-IP"];
        }

        _log.InfoFormat("TrueClientIP value is {0}", TrueClientIP);

        var userProfileRoles = _bmsDbUow.Users.GetProfileRoles(userId);
        var userRoles = string.Join(";", userProfileRoles.WebRoles);

        var userAgentBytes = Encoding.UTF8.GetBytes(request.UserAgent ?? "");
        var userAgentBase64 = Convert.ToBase64String(userAgentBytes);

        var userProfile = string.Format(";{0};{1};{2};;{3};{4};{5}",  // this format is to keep consistent with legacy app
            userProfileRoles.SessionGuid,
            userProfileRoles.UserId,
            userProfileRoles.LastWebCallDateTime.HasValue ? userProfileRoles.LastWebCallDateTime.Value.ToString("yyyyMMddHHmmss") : string.Empty,
            userProfileRoles.ContactName,
            request.UserHostAddress,
            userAgentBase64);

        var userData = userRoles + "|" + userProfile + "|" + TrueClientIP;

        _log.DebugFormat("Creating auth ticket for user {0} with data: {1}", userProfileRoles.UserId, userData);
        var ticket = new FormsAuthenticationTicket(
            1, // Version
            userProfileRoles.UserId, // Username
            DateTime.Now, // Date ticket was issued
            DateTime.Now.AddMinutes(_settings.AuthCookieExpirationInMinutes),  // Ticket expiration date
            createPersistentCookie,
            userData);

        string ticketHash = FormsAuth.Encrypt(ticket);

        var authCookie = new HttpCookie(FormsAuth.FormsCookieName, ticketHash);
        authCookie.Domain = FormsAuth.CookieDomain;
        authCookie.Secure = FormsAuth.RequireSSL;
        authCookie.SameSite = SameSiteMode.None;
        authCookie.HttpOnly = true;

        response.Cookies.Add(authCookie);
        
        // Add session marker cookie with timestamp to detect new sessions
        var sessionTimestampCookie = new HttpCookie("SessionTimestamp", DateTime.UtcNow.Ticks.ToString());
        sessionTimestampCookie.Domain = FormsAuth.CookieDomain;
        sessionTimestampCookie.Secure = FormsAuth.RequireSSL;
        sessionTimestampCookie.SameSite = SameSiteMode.None;
        sessionTimestampCookie.HttpOnly = true;
        response.Cookies.Add(sessionTimestampCookie);
        
        response.Cookies.Add(new HttpCookie(EQ.EquitableHealth.Web.Constants.CookieNames.TimeoutIndicator, "1"));
        ExpireCookie(EQ.EquitableHealth.Web.Constants.CookieNames.LegacyTimeoutIndicator);  // Always remove this cookie on login so the legacy app won't detect a session timeout immediately following login

        //Setup claims identity with consistent userId
        var claimsIdentity = new ClaimsIdentity("Auth0");
        claimsIdentity.AddClaim(new Claim(ClaimTypes.Name, userId));
        claimsIdentity.AddClaim(new Claim("BMSUserName", userId));

        //Create and set the principal
        var principal = new GenericPrincipal(claimsIdentity, userProfileRoles.WebRoles);
        System.Threading.Thread.CurrentPrincipal = principal;
        HttpContext.Current.User = principal;
    }

    public void SignOut()
    {
        // Clear all authentication cookies
        ExpireCookie(EQ.EquitableHealth.Web.Constants.CookieNames.Auth);
        ExpireCookie(EQ.EquitableHealth.Web.Constants.CookieNames.TimeoutIndicator);
        ExpireCookie(EQ.EquitableHealth.Web.Constants.CookieNames.Context);
        ExpireCookie("SessionTimestamp");
        FormsAuth.SignOut();
        
        // Clear session
        if (HttpContext.Current.Session != null)
        {
            HttpContext.Current.Session.Clear();
            HttpContext.Current.Session.Abandon();
        }
        
        // Ensure Auth0 is also signed out
        var owinContext = HttpContext.Current.GetOwinContext();
        if (owinContext != null)
        {
            owinContext.Authentication.SignOut(CookieAuthenticationDefaults.AuthenticationType);
            owinContext.Authentication.SignOut("Auth0");
        }
    }

    private void ExpireCookie(string name)
    {
        var cookie = new HttpCookie(name);
        cookie.Expires = DateTime.Now.AddDays(-1);
        cookie.Domain = FormsAuth.CookieDomain;
        HttpContext.Current.Response.Cookies.Add(cookie);
    }
}


===
public class Auth0SessionModule : IHttpModule
{
    private static readonly ILog log = LogManager.GetLogger(typeof(Auth0SessionModule));

    public void Init(HttpApplication app)
    {
        app.PostAcquireRequestState += OnPostAcquireRequestState;
        app.AuthenticateRequest += OnAuthenticateRequest; // Added to check authentication early
    }

    private void OnAuthenticateRequest(object sender, EventArgs e)
    {
        var app = sender as HttpApplication;
        if (app == null) return;

        var request = app.Context.Request;
        var response = app.Context.Response;

        // Skip for specific paths
        if (AuthenticationHelper.ShouldSkipRoute(request.Path.ToLowerInvariant()))
            return;

        // Check for login page - ensure we don't show authenticated header on login page
        if (request.Path.ToLowerInvariant().Contains("/account/index") || 
            request.Path.ToLowerInvariant().Contains("/account/login"))
        {
            // Check if we have a valid timestamp cookie but no auth cookie
            var timestampCookie = request.Cookies["SessionTimestamp"];
            var authCookie = request.Cookies[FormsAuthentication.FormsCookieName];
            
            if (timestampCookie != null && authCookie == null)
            {
                // User has logged out in another tab but timestamp still exists
                // Clear it to ensure login page shows unauthenticated state
                var expiredCookie = new HttpCookie("SessionTimestamp") { Expires = DateTime.Now.AddDays(-1) };
                response.Cookies.Add(expiredCookie);
            }
        }
    }

    private void OnPostAcquireRequestState(object sender, EventArgs e)
    {
        var app = sender as HttpApplication;
        if (app == null)
            return;

        var request = app.Context.Request;

        if (AuthenticationHelper.ShouldSkipRoute(request.Path.ToLowerInvariant()))
            return;

        //Check for Mobile token
        if (!string.IsNullOrEmpty(request.Headers["Authorization"]))
        {
            log.Info("Auth0SessionModule" + "Authorization Success");
            return;
        }

        //Regular website flow remains unchanged.
        var authCookie = request.Cookies[FormsAuthentication.FormsCookieName];
        var timestampCookie = request.Cookies["SessionTimestamp"];

        //Case 1: No BMSWebAuthCookie - Need complete authentication
        if (authCookie == null)
        {
            //Skip redirect if already on Auth0 callback or login process
            if (AuthenticationHelper.ShouldSkipPages(request.Path.ToLowerInvariant()))
            {
                return;
            }
            if (!app.Context.Request.Path.ToLowerInvariant().Contains("/account/login"))
            {
                RedirectToAuth0(app.Context);
                return;
            }
        }

        try
        {
            // If we have auth cookie but no timestamp cookie, something is wrong
            // This covers the case where a user logs in in another tab
            if (authCookie != null && timestampCookie == null && !AuthenticationHelper.ShouldSkipPages(request.Path.ToLowerInvariant()))
            {
                ClearAuthenticationState(app.Context);
                RedirectToAuth0(app.Context);
                return;
            }

            if (authCookie != null)
            {
                var authCookieInfo = new AuthCookieInfo(authCookie);

                //Creating a variable to hold the TrueClientIP value from the current request object's header
                string TrueClientIP = EQ.EquitableHealth.Web.Constants.CookieNames.TrueClientIP;

                if (request.Headers["True-Client-IP"] != null)
                {
                    TrueClientIP = request.Headers["True-Client-IP"];
                }

                //Case 2: Cookie exists but authentication failed or user agent or host address changed
                if (authCookieInfo.IsAuthenticated && TrueClientIP != authCookieInfo.TrueClientIP)
                {
                    var response = app.Context.Response;

                    // Kill all cookies, abandon session and return unauthorized
                    foreach (string cookieName in request.Cookies.AllKeys)
                    {
                        if (cookieName == "Language")
                        {
                            continue;
                        }

                        HttpCookie cookie = request.Cookies[cookieName];

                        if (cookie == null)
                        {
                            continue;
                        }

                        cookie.Expires = DateTime.Now.AddYears(-1);

                        if (cookieName == FormsAuthentication.FormsCookieName)
                        {
                            cookie.Domain = FormsAuthentication.CookieDomain;
                        }

                        response.SetCookie(cookie);
                    }

                    var session = app.Context.Session;
                    if (session != null)
                    {
                        session.Clear();
                        session.Abandon();
                    }

                    response.StatusCode = (int)HttpStatusCode.Unauthorized;
                    response.StatusDescription = "Unauthorized";
                    response.End();

                    //Sign out of Auth0
                    app.Context.GetOwinContext().Authentication.SignOut(CookieAuthenticationDefaults.AuthenticationType);
                    app.Context.GetOwinContext().Authentication.SignOut("Auth0");
                    RedirectToAuth0(app.Context);
                    return;
                }

                if (!app.Context.Request.Path.ToLowerInvariant().Contains("/account/login"))
                {
                    //Case 3: When Formsauthentication ticket expire
                    try
                    {
                        var ticket = FormsAuthentication.Decrypt(authCookie.Value);
                        if (ticket.Expired)
                        {
                            ClearAuthenticationState(app.Context);
                            RedirectToAuth0(app.Context);
                            return;
                        }
                    }
                    catch (Exception ex)
                    {
                        log.Error("Error decrypting FormsAuthentication ticket", ex);
                        ClearAuthenticationState(app.Context);
                        RedirectToAuth0(app.Context);
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            log.Error("Error in Auth0SessionModule", ex);
            //Any error in cookie validation
            ClearAuthenticationState(app.Context);
            RedirectToAuth0(app.Context);
            return;
        }
    }

    public void Dispose()
    {
    }

    private void RedirectToAuth0(HttpContext context)
    {
        ClearCertificateCookie(context);
        ClearAuthenticationState(context);

        // Always redirect to /Account/Index, not directly to Auth0
        // This ensures consistent timeout behavior
        context.Response.Redirect("/Account/Index", false);
        context.ApplicationInstance.CompleteRequest();
    }

    private void ClearCertificateCookie(HttpContext context)
    {
        //Clear Certificate cookie first
        var pmCertIdCookie = context.Request.Cookies[EQ.EquitableHealth.Web.Constants.CookieNames.PmCertId];
        if (pmCertIdCookie != null)
        {
            pmCertIdCookie = new HttpCookie(EQ.EquitableHealth.Web.Constants.CookieNames.PmCertId, null);
            pmCertIdCookie.Expire();
            context.Response.Cookies.Add(pmCertIdCookie);
        }
    }

    private void ClearAuthenticationState(HttpContext context)
    {
        //Clear all authentication cookies
        var authCookie = new HttpCookie(FormsAuthentication.FormsCookieName)
        {
            Expires = DateTime.Now.AddDays(-1),
            Domain = FormsAuthentication.CookieDomain
        };
        context.Response.Cookies.Add(authCookie);

        var timestampCookie = new HttpCookie("SessionTimestamp")
        {
            Expires = DateTime.Now.AddDays(-1),
            Domain = FormsAuthentication.CookieDomain
        };
        context.Response.Cookies.Add(timestampCookie);

        //Clear session
        if (context.Session != null)
        {
            context.Session.Clear();
            context.Session.Abandon();
        }

        //Sign out of Auth0
        try
        {
            var owinContext = context.GetOwinContext();
            if (owinContext != null)
            {
                owinContext.Authentication.SignOut(CookieAuthenticationDefaults.AuthenticationType);
                owinContext.Authentication.SignOut("Auth0");
            }
        }
        catch (Exception ex)
        {
            log.Error("Error signing out of Auth0", ex);
        }
    }
}

===
public class BmsSessionModule : IHttpModule
{
    private static readonly ILog log = LogManager.GetLogger(typeof(BmsSessionModule));
    
    public void Init(HttpApplication context)
    {
        context.PostAuthorizeRequest += Application_PostAuthorizeRequest;
    }
    
    private void Application_PostAuthorizeRequest(object source, EventArgs e)
    {
        const string legacyThrottleDateFormat = "MM/dd/yyyy HH:mm:ss";
        var app = source as HttpApplication;
        if (app == null) return;

        //Check for Mobile token
        if (!string.IsNullOrEmpty(app.Context.Request.Headers["Authorization"]))
        {
            log.Info("BmsSessionModule" + "Authorization Success");
            return;
        }
        
        var authCookie = app.Context.Request.Cookies[FormsAuthentication.FormsCookieName];
        var timestampCookie = app.Context.Request.Cookies["SessionTimestamp"];
        
        //Skip routes when path of the url changes to path mentioned in the ShouldSkipRoute function.
        if (AuthenticationHelper.ShouldSkipRoute(app.Context.Request.Path))
        {
            if (authCookie == null) return;

            var authCookieInfo = new AuthCookieInfo(authCookie);
            if (!authCookieInfo.IsAuthenticated) return;

            SetupUserIdentity(app.Context, authCookieInfo.UserName, authCookieInfo.Roles);
            return;
        }

        //Regular authentication flow
        if (app.Context.User != null && app.Context.User.Identity.IsAuthenticated)
        {
            //If on callback URL, let it proceed to create FormsAuth ticket
            if (app.Context.Request.Path.ToLowerInvariant().Contains("account/userinfo"))
            {
                return;
            }

            //For other URLs, validate complete authentication
            if (authCookie == null)
            {
                TriggerReauthentication(app.Context);
                return;
            }
            
            // Verify session timestamp cookie exists - if not, force re-auth
            // This handles multi-tab scenarios when logging in as different users
            if (timestampCookie == null && !AuthenticationHelper.ShouldSkipPages(app.Context.Request.Path.ToLowerInvariant()))
            {
                TriggerReauthentication(app.Context);
                return;
            }

            DateTime lastUpdate;
            if (app.Context.Request.Cookies[EQ.EquitableHealth.Web.Constants.CookieNames.LegacyRefreshThrottle] == null)
            {
                lastUpdate = DateTime.MinValue;
            }
            else
            {
                try
                {
                    lastUpdate = DateTime.ParseExact(app.Context.Request.Cookies[EQ.EquitableHealth.Web.Constants.CookieNames.LegacyRefreshThrottle].Value, legacyThrottleDateFormat, Culture.Invariant);
                }
                catch  // unable to parse cookie value
                {
                    lastUpdate = DateTime.MinValue;
                }
            }

            // Check auth cookie validity
            try 
            {
                var authCookieInfo = new AuthCookieInfo(authCookie);
                var userId = GetEffectiveUserId(app.Context, authCookieInfo);
                
                // Validate FormsAuth ticket
                var ticket = FormsAuthentication.Decrypt(authCookie.Value);
                if (ticket.Expired)
                {
                    TriggerReauthentication(app.Context);
                    return;
                }

                // Keep the last activity date updated
                if (DateTime.Now > lastUpdate.AddSeconds(15))
                {
                    app.Context.Response.Cookies.Add(new HttpCookie(EQ.EquitableHealth.Web.Constants.CookieNames.LegacyRefreshThrottle, DateTime.Now.ToString(legacyThrottleDateFormat, Culture.Invariant)));

                    var bmsDbUow = DependencyResolver.Current.GetService<IBmsDbUow>();
                    bmsDbUow.Users.UpdateLastActivityDate(userId, authCookieInfo.SessionGuid);  // this call will update last request datetime in database
                }

                //Set up identity with proper userId
                SetupUserIdentity(app.Context, userId, authCookieInfo.Roles);
            }
            catch (Exception ex)
            {
                log.Error("Error validating authentication", ex);
                TriggerReauthentication(app.Context);
                return;
            }
        }
    }
    
    public void Dispose()
    {
    }

    private void SetupUserIdentity(HttpContext context, string userId, string[] roles)
    {
        var identity = new GenericIdentity(userId, CookieAuthenticationDefaults.AuthenticationType);
        context.User = new GenericPrincipal(identity, roles);
    }

    private string GetEffectiveUserId(HttpContext context, AuthCookieInfo cookieInfo)
    {
        //First try to get userId from claims
        var claimsPrincipal = context.User as ClaimsPrincipal;
        if (claimsPrincipal != null)
        {
            var userIdClaim = claimsPrincipal.FindFirst("BMSUserName");
            if (userIdClaim != null)
            {
                return userIdClaim.Value;
            }

            //Fallback to cookie
            return cookieInfo.UserName;
        }
        //Fallback to cookie
        return cookieInfo.UserName;
    }

    private void TriggerReauthentication(HttpContext context)
    {
        // Always redirect to /Account/Index for consistency
        context.Response.Redirect("/Account/Index", false);
        context.ApplicationInstance.CompleteRequest();
    }
}
====
public ActionResult Index(string returnUrl)
{
    // Clear any stale authentication state when viewing login page
    if (User.Identity.IsAuthenticated)
    {
        // User is authenticated but still reached login page
        // This is an inconsistent state - force re-authentication
        _formsAuthentication.SignOut();
        
        // Clear all cookies that might indicate authentication
        foreach (string cookieName in HttpContext.Request.Cookies.AllKeys)
        {
            if (cookieName.StartsWith(".AspNet") || 
                cookieName == FormsAuthentication.FormsCookieName || 
                cookieName == "SessionTimestamp")
            {
                var cookie = new HttpCookie(cookieName)
                {
                    Expires = DateTime.Now.AddDays(-1),
                    Domain = FormsAuthentication.CookieDomain
                };
                HttpContext.Response.Cookies.Add(cookie);
            }
        }
        
        HttpContext.Session.Clear();
        HttpContext.Session.Abandon();
        
        HttpContext.GetOwinContext().Authentication.SignOut(CookieAuthenticationDefaults.AuthenticationType);
        HttpContext.GetOwinContext().Authentication.SignOut("Auth0");
    }
    
    if (!string.IsNullOrEmpty(returnUrl))
    {
        return View(returnUrl);
    }
    return View("~/Views/Account/Login.cshtml");
}

[AllowAnonymous]
public ActionResult Login(string returnUrl)
{
    // Ensure no stale cookies before redirecting to Auth0
    var timestampCookie = Request.Cookies["SessionTimestamp"];
    if (timestampCookie != null)
    {
        var expiredCookie = new HttpCookie("SessionTimestamp")
        {
            Expires = DateTime.Now.AddDays(-1),
            Domain = FormsAuthentication.CookieDomain
        };
        Response.Cookies.Add(expiredCookie);
    }
    
    HttpContext.GetOwinContext().Authentication.Challenge(new AuthenticationProperties
    {
        RedirectUri = returnUrl ?? Url.Action("UserInfo", "Account"),
        Dictionary = { { "prompt", "login" } } // Force Re-authentication
    },
    "Auth0");

    return new HttpUnauthorizedResult();
}

[Authorize]
public void Logout()
{
    _formsAuthentication.SignOut();

    // Thoroughly clean up cookies
    foreach (string cookieName in HttpContext.Request.Cookies.AllKeys)
    {
        HttpCookie cookie = new HttpCookie(cookieName)
        {
            Expires = DateTime.Now.AddDays(-1)
        };
        
        if (cookieName == FormsAuthentication.FormsCookieName || 
            cookieName.StartsWith(".AspNet") || 
            cookieName == "SessionTimestamp")
        {
            cookie.Domain = FormsAuthentication.CookieDomain;
        }
        
        HttpContext.Response.Cookies.Add(cookie);
    }
    
    // Clear session
    HttpContext.Session.Clear();
    HttpContext.Session.Abandon();

    // Clear Auth0 session
    HttpContext.GetOwinContext().Authentication.SignOut(CookieAuthenticationDefaults.AuthenticationType);
    HttpContext.GetOwinContext().Authentication.SignOut("Auth0");
    
    // Redirect to login page instead of Auth0 logout page to prevent automatic relogin
    Response.Redirect("/Account/Index", false);
    HttpContext.ApplicationInstance.CompleteRequest();
}
