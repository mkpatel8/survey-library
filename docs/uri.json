{
  "folders": [
    "design-survey",
    "customize-question-types"
  ],
  "rename": {
    "design-survey-question-titles": "design-survey-configure-question-titles",
    "design-survey-conditional-display": "design-survey-conditional-logic",
    "design-survey-predefine-answers": "design-survey-pre-populate-form-fields",
    "localization": "survey-localization",
    "handle-survey-results-access": "access-and-modify-survey-results",
    "handle-survey-results-store": "how-to-store-survey-results",
    "handle-survey-results-continue-incomplete": "how-to-save-and-restore-incomplete-survey"
  },
  "classRename": {
    "surveymodel": "survey-data-model",
    "pagemodel": "page-model",
    "popupsurveymodel": "pop-up-survey-model",
    "questiontextmodel": "text-entry-question-model",
    "questioncheckboxmodel": "checkbox-question-model",
    "questionrankingmodel": "ranking-question-model",
    "questionradiogroupmodel": "radio-button-question-model",
    "questiondropdownmodel": "dropdown-menu-model",
    "questiontagboxmodel": "dropdown-tag-box-model",
    "questioncommentmodel": "comment-field-model",
    "questionratingmodel": "rating-scale-question-model",
    "questionimagepickermodel": "image-picker-question-model",
    "questionbooleanmodel": "boolean-question-model",
    "questionimagemodel": "add-image-to-survey",
    "questionhtmlmodel": "add-custom-html-to-survey",
    "questionsignaturepadmodel": "signature-pad-model",
    "questionexpressionmodel": "expression-model",
    "questionfilemodel": "file-model",
    "questionmatrixmodel": "matrix-table-question-model",
    "panelmodel": "panel-model",
    "questionpaneldynamicmodel": "dynamic-panel-model",
    "questionmultipletextmodel": "multiple-text-entry-question-model",
    "questionmatrixdynamicmodel": "dynamic-matrix-table-question-model",
    "questionmatrixdropdownmodel": "matrix-table-with-dropdown-list"
  }
}


# C2G Application Upgrade Strategy Analysis

## Executive Summary

**Current State:** Angular 6.1.5 + .NET Core 2.1 application with Azure Functions (.NET Standard 2.0) running on Azure with hosting costs ($3000 CAD/year) for low volume usage (~100 daily users, max 1000 DB records).

**Primary Objectives:**
- **Core Technology Upgrades:** Modernize .NET and Angular to minimally acceptable, supported versions
- **Security & Compliance:** Fix SNYK vulnerabilities, upgrade TLS to 1.2, integrate Okta authentication for APIs
- **Containerization:** Containerize APIs for better scalability and deployment while maintaining App Service model
- **API Management:** Route all backend communication through Azure API Management (APIM)
- **Bank Validation Service:** Upgrade to latest acceptable .NET version
- **PDF Service:** Create public endpoint if Okta integration affects current functionality
- Replace iText PDF generation with EVO PDF
- Optimize costs through architecture improvements
- **Long-term Vision:** Maintain C2G with minimal effort while preparing for gradual EBS migration

## Current Architecture Analysis

### Components:
- **Frontend:** Angular 6.1.5 (Web App) - No authentication required
- **Backend APIs:** .NET Core 2.1 Console Application 
- **Bank Validation Service:** Legacy .NET version (needs upgrade)
- **Functions:** Azure Functions (.NET Standard 2.0)
  - Function 1: Every 30 min - Process applications, generate PDF + 2 CSVs, SFTP transfer
  - Function 2: Daily 11:50 PM - Remove 14+ day old applications
  - Function 3: Weekly Monday - Generate weekly transaction report CSV from transaction table
- **Database:** SQL Server (5 tables, <1000 records total)
- **Infrastructure:** Azure App Service, SQL Database, Function Apps, Storage
- **Missing Components:** Okta integration, API Management (APIM), Containerization

### Cost Analysis:
- **Current:** $3000 CAD/year (~$250 CAD/month)
- **Assessment:** Reasonable cost for Azure hosting but optimization opportunities exist
- **Opportunity:** Moderate cost reduction potential through CosmosDB and architecture optimization

## Upgrade Strategy Options

---

## Option 1: Incremental Version Updates (RECOMMENDED)

### Approach:
Minimal viable upgrades to reach LTS versions while addressing immediate needs.

### Upgrade Path:
1. **Angular:** 6.1.5 → 15 (Minimally acceptable supported version)
   - Focus on security fixes and critical vulnerabilities only
   - Maintain compatibility with existing functionality
2. **.NET Core:** 2.1 → .NET 6 (Most relevant LTS, not latest)
   - Stable, well-supported LTS version with good migration path
   - Balances modernization with minimal risk
3. **Bank Validation Service:** Legacy .NET → .NET 6 (align with main application)
4. **Azure Functions:** .NET Standard 2.0 → .NET 6
5. **Containerization:** Package APIs in containers, deploy to existing App Service
6. **API Management:** Implement APIM for all backend communication
7. **Authentication:** Integrate Okta for API security, maintain public PDF endpoint
8. **Database:** Migrate to CosmosDB for cost optimization

### Implementation Timeline: 12-14 weeks (30 hours/week)

#### Phase 1 (Weeks 1-3): Infrastructure & API Management
- Set up Azure API Management (APIM)
- CosmosDB setup and data migration (5 tables)
- Configure APIM routing for all backend APIs
- **Estimated Effort:** 90 hours

#### Phase 2 (Weeks 4-8): Backend & Containerization
- Upgrade .NET Core 2.1 → .NET 6 (main APIs and bank validation service)
- Containerize all APIs and configure for App Service deployment
- Configure TLS 1.2 enforcement
- Integrate Okta authentication for API endpoints
- Create public PDF service endpoint (if needed)
- Update all 3 Azure Functions to .NET 6
- Replace iText with EVO PDF
- **Estimated Effort:** 150 hours

#### Phase 3 (Weeks 9-11): Frontend Upgrade
- Angular 6.1.5 → Angular 15 (minimally acceptable version)
- Address high/critical SNYK vulnerabilities
- Update deprecated dependencies
- Ensure API compatibility with containerized backend
- **Estimated Effort:** 90 hours

#### Phase 4 (Weeks 12-14): Testing, Security & Deployment
- End-to-end testing with APIM routing
- Okta integration testing
- Security vulnerability scanning
- Container deployment validation
- Production deployment and monitoring
- **Estimated Effort:** 90 hours

### Cost Impact:
- **Development:** ~420 hours (14 weeks at 30 hours/week)
- **Annual Savings:** $600-1200 CAD (CosmosDB + optimized hosting)
- **Additional Costs:** APIM licensing (~$500-1000 CAD/year)
- **Net ROI:** 3-4 years

### Pros:
✅ **Balanced approach** - not bleeding edge, not obsolete
✅ Addresses all security vulnerabilities and compliance requirements
✅ **Containerization** improves deployment and scalability
✅ **APIM integration** provides better API governance and security
✅ **.NET 6** is stable LTS with excellent support until November 2024
✅ **Angular 15** minimally acceptable with security patches
✅ **Okta integration** enhances API security
✅ Maintains current functionality while modernizing infrastructure
✅ **Prepares for EBS migration** with containerized architecture
✅ Reasonable timeline and effort

### Cons:
❌ **Additional complexity** with APIM and Okta integration
❌ **Longer timeline** due to containerization and API management setup
❌ **Additional ongoing costs** for APIM licensing
❌ Still not aligned with EBS technology stack (React)
❌ Angular 15 will eventually need further updates

---

## Option 2: Full Technology Stack Conversion

### Approach:
Convert to React 18 + .NET 8 to align with future EBS merger.

### Technology Changes:
- **Frontend:** Angular 6.1.5 → React 18
- **Backend:** .NET Core 2.1 → .NET 8
- **Functions:** .NET Standard 2.0 → .NET 8
- **Database:** SQL Server → CosmosDB

### Implementation Timeline: 19-22 weeks (30 hours/week)

#### Phase 1 (Weeks 1-4): Architecture & Infrastructure Setup
- React application scaffolding and project structure
- .NET 8 API architecture design
- CosmosDB setup and data migration
- Development environment configuration
- **Estimated Effort:** 120 hours

#### Phase 2 (Weeks 5-12): Complete Frontend Rewrite
- **COMPLETE APPLICATION REWRITE IN REACT:**
  - Recreate all forms (personal info, contact, banking, health info)
  - Rebuild validation logic and error handling
  - Implement responsive UI/UX design
  - Recreate routing and navigation
  - Rebuild state management
  - Implement file uploads and form submissions
  - Create new component library
  - Write comprehensive unit tests
- **Estimated Effort:** 240 hours

#### Phase 3 (Weeks 13-20): Backend Development & Integration
- .NET 6 API development (controllers, services, models)
- Bank validation service upgrade to .NET 6
- Azure Functions upgrade to .NET 6
- Containerization of all APIs
- TLS 1.2 configuration and enforcement
- Okta authentication integration
- APIM configuration and routing
- EVO PDF integration and testing
- SFTP integration updates
- Database integration with CosmosDB
- API integration with React frontend
- **Estimated Effort:** 240 hours

#### Phase 4 (Weeks 19-22): Comprehensive Testing & Deployment
- End-to-end testing of complete application
- Performance optimization and load testing
- Security testing and vulnerability scanning
- User acceptance testing
- Production deployment and monitoring
- **Estimated Effort:** 120 hours

### Cost Impact:
- **Development:** ~780 hours (26 weeks at 30 hours/week)
- **Annual Savings:** $600-1200 CAD
- **Additional Costs:** APIM licensing (~$500-1000 CAD/year)
- **Net ROI:** 8-15 years (terrible ROI)

### Pros:
✅ Fully aligned with EBS technology stack
✅ Modern, long-term sustainable architecture
✅ Significant cost reduction
✅ No future conversion needed for EBS merger
✅ Latest security patches and features

### Cons:
❌ **MASSIVE development effort** (660 hours = 5+ months full-time)
❌ **Complete application rewrite** - everything rebuilt from scratch
❌ Higher risk due to complete rewrite
❌ **Significantly longer timeline** to realize benefits
❌ **Severe over-engineering** for current business needs
❌ Extensive testing required for entirely new application
❌ **Terrible ROI** (5-10 years payback for $250/month hosting cost)

---

## Option 3: Hybrid Approach

### Approach:
Upgrade backend to .NET 8 while keeping Angular 12, with optional React conversion later.

### Implementation Timeline: 18-22 weeks (30 hours/week)

### Phase 1: Backend Modernization (14-16 weeks)
- .NET Core 2.1 → .NET 6 (main APIs and bank validation service)
- Azure Functions → .NET 6 (all 3 functions)
- SQL Server → CosmosDB migration
- Containerization of APIs
- APIM setup and configuration
- TLS 1.2 configuration
- Okta integration for APIs
- EVO PDF implementation and testing
- **Estimated Effort:** 420-480 hours

### Phase 2: Frontend Minimal Upgrade (6-8 weeks)
- Angular 6.1.5 → Angular 15 (minimally acceptable)
- Address high/critical SNYK vulnerabilities
- Handle breaking changes and deprecated dependencies
- Update API integration for containerized backend
- **Estimated Effort:** 180-240 hours

### Optional Phase 3: React Conversion (When EBS merger is confirmed)
- **Complete Angular to React rewrite** (10-12 weeks)
- All forms, validation, UI components rebuilt
- Integration with existing containerized APIs
- Align with EBS timeline
- **Estimated Effort:** 300-360 hours

### Implementation Timeline: 12-16 weeks (Phases 1-2)

### Cost Impact:
- **Initial Development:** ~600-720 hours (20-24 weeks)
- **React Conversion (later):** ~300-360 hours (10-12 weeks)
- **Annual Savings:** $600-1200 CAD
- **Additional Costs:** APIM licensing (~$500-1000 CAD/year)
- **Net ROI:** 6-8 years

### Pros:
✅ Balanced approach
✅ Immediate cost benefits
✅ Flexibility for future decisions
✅ Modern backend architecture
✅ Reduced risk compared to full rewrite

### Cons:
❌ Potential double work if React conversion needed
❌ Still not fully aligned with EBS initially
❌ **Longer overall timeline** (14-17 weeks + future React work)
❌ **Higher total cost** if React conversion eventually needed

---

## Database Migration Analysis: SQL Server vs CosmosDB

### Current SQL Database:
- **Tables:** 5 (Application, Rates, Dependent, Transaction, + 1 more)
- **Volume:** <1000 records total
- **Operations:** Mostly CRUD, simple queries
- **Cost:** High (part of $3000/month)

### CosmosDB Migration Benefits:
- **Cost Reduction:** 20-40% savings for this volume ($50-100 CAD/month)
- **Scalability:** Better for future growth
- **Performance:** Faster for document-style operations
- **Maintenance:** Reduced administrative overhead

### Migration Considerations:
- **Effort:** Medium (40-60 hours)
- **Risk:** Low (simple data model)
- **Complexity:** Straightforward mapping
- **Testing:** Required but manageable

---

## Recommendation: Option 1 (Incremental Updates)

### Rationale:

Given your specific context:
- **Low business criticality**
- **Minimal change requirement**
- **High current costs**
- **Uncertain EBS merger timeline** 
- **Small, stable user base**

**Option 1 provides the best balance of:**
- ✅ Security vulnerability resolution (primary driver)
- ✅ Compliance with modern TLS requirements
- ✅ Long-term support versions
- ✅ **Cost optimization is secondary benefit** (modest $600-1200 annual savings)
- ✅ Minimal risk and disruption
- ✅ Reasonable implementation timeline (11 weeks)
- ✅ Maintains EBS merger flexibility

**Key Insight:** With additional requirements (APIM, Okta, containerization, bank validation service upgrade), **the primary justification remains security, compliance, and infrastructure modernization**. The containerized architecture and APIM integration also **prepare C2G for easier EBS migration** when the time comes.

### Implementation Priority:
1. **CosmosDB Migration** (foundation for cost optimization)
2. **Azure API Management (APIM) Setup** (required for backend routing)
3. **.NET 6 Upgrade** (main APIs, bank validation service, Azure Functions)
4. **Containerization** (APIs for better deployment and scalability)
5. **Okta Integration** (API security)
6. **TLS 1.2 Configuration** (security compliance)
7. **EVO PDF Integration** (licensing requirement)
8. **Angular 15 Upgrade** (minimal acceptable version for security)

### Future State Decision Tree:
- **If EBS merger confirmed within 12 months:** Convert to React then
- **If EBS merger delayed 2+ years:** Stay with Angular 12 until merger
- **If EBS merger cancelled:** Continue with current stack

---

## Risk Assessment

### Option 1 Risks (LOW):
- **Technical:** Minimal breaking changes expected
- **Timeline:** Well-established upgrade paths
- **Cost:** Predictable savings
- **Business:** Low impact on operations

### Mitigation Strategies:
- Thorough testing in staging environment
- Gradual rollout approach
- Rollback plan prepared
- Monitor cost savings realization

---

## Success Metrics

### Technical:
- ✅ Zero SNYK high/critical vulnerabilities
- ✅ TLS 1.2 enforced across all components
- ✅ All components on LTS versions
- ✅ EVO PDF successfully integrated
- ✅ Application functionality unchanged

### Financial:
- ✅ 20-40% reduction in annual Azure costs ($600-1200 savings)
- ✅ ROI achieved within 2-3 years
- ✅ CosmosDB costs optimized for low volume usage

### Operational:
- ✅ No disruption to admin workflows
- ✅ SFTP processes unchanged
- ✅ Performance maintained or improved

---

## Additional Considerations Not to Miss

### Security & Compliance:
- **TLS 1.2 Configuration:** Update Azure App Service, SQL connections, SFTP, and API calls
- **SNYK Vulnerability Remediation:** Track and verify all high/critical issues resolved
- **Health Data Protection:** Ensure encryption at rest and in transit maintained

### Azure Function Specifics:
- **Function 1:** 30-minute schedule - ensure efficient processing and error handling
- **Function 2:** Daily cleanup - verify data retention compliance (14-day rule)
- **Function 3:** Weekly CSV generation - maintain transaction history reporting format

### Integration Points:
- **SFTP Configuration:** Test file transfer functionality post-upgrade
- **PDF Generation:** Ensure EVO PDF maintains same format/layout as iText
- **CSV Format:** Verify admin team can still process generated files
- **Application Insights:** Update monitoring and logging for new versions

### Performance Considerations:
- **CosmosDB Query Optimization:** Design partition keys for efficient queries
- **Azure Function Cold Start:** Consider premium plan if startup time becomes issue
- **File Generation Performance:** Monitor PDF/CSV generation times
- **Concurrent User Handling:** Test 100+ simultaneous users during peak periods

### Rollback Strategy:
- **Database Backup:** Full SQL backup before CosmosDB migration
- **Application Versioning:** Blue-green deployment capability
- **Configuration Rollback:** Maintain previous TLS and function settings
- **Monitoring Setup:** Real-time alerts for errors or performance degradation

### Testing Requirements:
- **End-to-End Testing:** Complete application flow from submission to SFTP transfer
- **Cross-Browser Testing:** Ensure Angular 12 compatibility
- **Load Testing:** Verify performance with expected user volumes
- **Security Testing:** Vulnerability scanning post-upgrade
- **Admin Workflow Testing:** Ensure SFTP files are correctly processed by admin team

## Assumptions

1. **Cost Reduction:** CosmosDB + optimized hosting = 20-40% annual savings ($600-1200)
2. **Timeline:** Standard upgrade paths without major blockers
3. **EBS Merger:** Timeline remains uncertain (1-3 years)
4. **Resources:** Development team available for focused sprint work
5. **Testing:** Existing functionality can be validated efficiently
6. **Dependencies:** No hidden integrations or dependencies
7. **Work Schedule:** 6 hours/day, 5 days/week = 30 hours/week
8. **Admin Process:** Current SFTP workflow and file formats remain unchanged
9. **User Volume:** Stays consistent at ~100 daily users
10. **Database Size:** Remains small (<1000 records) making CosmosDB ideal
## Long-Term Strategic Vision

### C2G Maintenance Strategy:
- **Minimize Ongoing Effort:** Keep C2G stable and secure with minimal feature development
- **Containerized Architecture:** Facilitates easier migration and deployment management
- **APIM Integration:** Provides centralized API governance for both C2G and future EBS integration
- **Gradual Feature Migration:** Move functionality to EBS incrementally rather than big-bang approach

### EBS Integration Roadmap:
1. **Phase 1 (Current):** Modernize C2G infrastructure and security
2. **Phase 2 (Year 1-2):** Identify features for EBS migration priority
3. **Phase 3 (Year 2-3):** Begin migrating high-value features to EBS
4. **Phase 4 (Year 3+):** Sunset C2G components as EBS capabilities mature

### Technology Alignment:
- **Containerized APIs:** Easier to migrate or replicate in EBS environment
- **CosmosDB:** Can be shared between C2G and EBS if needed
- **APIM:** Provides unified API management across both platforms
- **Okta Integration:** Consistent authentication strategy

### Cost Optimization Strategy:
- **Eliminate Redundancies:** As features move to EBS, decommission C2G components
- **Shared Services:** Leverage common infrastructure (APIM, databases, authentication)
- **Right-sizing:** Scale down C2G infrastructure as usage decreases

---

## Next Steps

1. **Approve recommended approach** (Option 1)
2. **Allocate development resources** (420 hours over 12-14 weeks)
3. **Set up development/staging environments**
4. **Begin with CosmosDB migration** (immediate cost impact)
5. **Execute phased implementation plan**
6. **Monitor cost savings and performance**
7. **Reassess EBS merger timeline** in 12 months

---

**Document Version:** 1.0  
**Last Updated:** May 22, 2025  
**Next Review:** After implementation completion
