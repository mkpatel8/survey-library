{
  "folders": [
    "design-survey",
    "customize-question-types"
  ],
  "rename": {
    "design-survey-question-titles": "design-survey-configure-question-titles",
    "design-survey-conditional-display": "design-survey-conditional-logic",
    "design-survey-predefine-answers": "design-survey-pre-populate-form-fields",
    "localization": "survey-localization",
    "handle-survey-results-access": "access-and-modify-survey-results",
    "handle-survey-results-store": "how-to-store-survey-results",
    "handle-survey-results-continue-incomplete": "how-to-save-and-restore-incomplete-survey"
  },
  "classRename": {
    "surveymodel": "survey-data-model",
    "pagemodel": "page-model",
    "popupsurveymodel": "pop-up-survey-model",
    "questiontextmodel": "text-entry-question-model",
    "questioncheckboxmodel": "checkbox-question-model",
    "questionrankingmodel": "ranking-question-model",
    "questionradiogroupmodel": "radio-button-question-model",
    "questiondropdownmodel": "dropdown-menu-model",
    "questiontagboxmodel": "dropdown-tag-box-model",
    "questioncommentmodel": "comment-field-model",
    "questionratingmodel": "rating-scale-question-model",
    "questionimagepickermodel": "image-picker-question-model",
    "questionbooleanmodel": "boolean-question-model",
    "questionimagemodel": "add-image-to-survey",
    "questionhtmlmodel": "add-custom-html-to-survey",
    "questionsignaturepadmodel": "signature-pad-model",
    "questionexpressionmodel": "expression-model",
    "questionfilemodel": "file-model",
    "questionmatrixmodel": "matrix-table-question-model",
    "panelmodel": "panel-model",
    "questionpaneldynamicmodel": "dynamic-panel-model",
    "questionmultipletextmodel": "multiple-text-entry-question-model",
    "questionmatrixdynamicmodel": "dynamic-matrix-table-question-model",
    "questionmatrixdropdownmodel": "matrix-table-with-dropdown-list"
  }
}


# C2G Application Upgrade Strategy Analysis

## Executive Summary

**Current State:** Angular 6.1.5 + .NET Core 2.1 application with Azure Functions (.NET Standard 2.0) running on Azure with high operational costs ($3000 CAD/month) for low volume usage (~100 daily users, max 1000 DB records).

**Primary Objectives:**
- Fix SNYK vulnerabilities 
- Upgrade TLS version from 1.1 to 1.2
- Achieve long-term support versions with minimal changes
- Replace iText PDF generation with EVO PDF
- Optimize costs (potentially move to CosmosDB)
- Prepare for potential EBS merger (React 18 + .NET 8) in 1-3 years

## Current Architecture Analysis

### Components:
- **Frontend:** Angular 6.1.5 (Web App)
- **Backend:** .NET Core 2.1 Console Application 
- **Functions:** Azure Functions (.NET Standard 2.0)
  - Function 1: Every 30 min - Process applications, generate PDF + 2 CSVs, SFTP transfer
  - Function 2: Daily 11:50 PM - Remove 14+ day old applications
  - Function 3: Weekly Monday - Generate weekly transaction report CSV from transaction table
- **Database:** SQL Server (5 tables, <1000 records total)
- **Infrastructure:** Azure App Service, SQL Database, Function Apps, Storage

### Cost Analysis:
- **Current:** $3000 CAD/month 
- **Issue:** Extremely high cost for low-volume application
- **Opportunity:** Significant cost reduction potential through architecture optimization

## Upgrade Strategy Options

---

## Option 1: Incremental Version Updates (RECOMMENDED)

### Approach:
Minimal viable upgrades to reach LTS versions while addressing immediate needs.

### Upgrade Path:
1. **Angular:** 6.1.5 → 18 (Current LTS) 
   - Major version jump with significant breaking changes
   - Focus on critical breaking changes and security fixes
2. **.NET Core:** 2.1 → .NET 8 (Current LTS)
   - Major upgrade path with substantial changes
   - More breaking changes than initially estimated
3. **Azure Functions:** .NET Standard 2.0 → .NET 8
4. **Database:** Migrate to CosmosDB for cost optimization

### Implementation Timeline: 10-12 weeks (30 hours/week)

#### Phase 1 (Weeks 1-3): Infrastructure & Database
- Set up CosmosDB and migrate data (5 tables)
- Update connection strings and data access patterns
- Test data migration and queries
- **Estimated Effort:** 60 hours

#### Phase 2 (Weeks 4-7): Backend Upgrades
- Upgrade .NET Core 2.1 → .NET 8 (major version jump, substantial breaking changes)
- Configure TLS 1.2 enforcement in application and Azure settings
- Replace iText with EVO PDF (integration, testing, formatting)
- Update all 3 Azure Functions to .NET 8
- Update SFTP integration and file generation logic
- **Estimated Effort:** 120 hours

#### Phase 3 (Weeks 8-10): Frontend Upgrade
- Angular 6.1.5 → Angular 18 (massive version jump, major breaking changes)
- Update dependencies and address vulnerabilities
- Update forms, validation, and UI components
- Handle deprecated APIs and major architectural changes
- **Estimated Effort:** 90 hours

#### Phase 4 (Weeks 11-12): Testing & Deployment
- Unit testing for all components
- Integration testing (end-to-end application flow)
- Performance validation
- User acceptance testing
- Production deployment and monitoring
- **Estimated Effort:** 60 hours

### Cost Impact:
- **Development:** ~330 hours (11 weeks at 30 hours/week)
- **Monthly Savings:** $1500-2000 CAD (CosmosDB + optimized hosting)
- **ROI:** 4-5 months

### Pros:
✅ Minimal risk and changes
✅ Addresses all SNYK vulnerabilities
✅ TLS 1.2 compliance for enhanced security
✅ Significant cost reduction
✅ Maintains current functionality
✅ Future EBS merger still feasible
✅ Quick implementation

### Cons:
❌ **Much larger version jumps** than initially planned
❌ Angular 6.1.5 → 18 involves massive breaking changes
❌ .NET 2.1 → 8 has substantial architectural changes
❌ **Higher risk** due to major version jumps
❌ **Longer timeline** than originally estimated

---

## Option 2: Full Technology Stack Conversion

### Approach:
Convert to React 18 + .NET 8 to align with future EBS merger.

### Technology Changes:
- **Frontend:** Angular 6.1.5 → React 18
- **Backend:** .NET Core 2.1 → .NET 8
- **Functions:** .NET Standard 2.0 → .NET 8
- **Database:** SQL Server → CosmosDB

### Implementation Timeline: 19-22 weeks (30 hours/week)

#### Phase 1 (Weeks 1-4): Architecture & Infrastructure Setup
- React application scaffolding and project structure
- .NET 8 API architecture design
- CosmosDB setup and data migration
- Development environment configuration
- **Estimated Effort:** 120 hours

#### Phase 2 (Weeks 5-12): Complete Frontend Rewrite
- **COMPLETE APPLICATION REWRITE IN REACT:**
  - Recreate all forms (personal info, contact, banking, health info)
  - Rebuild validation logic and error handling
  - Implement responsive UI/UX design
  - Recreate routing and navigation
  - Rebuild state management
  - Implement file uploads and form submissions
  - Create new component library
  - Write comprehensive unit tests
- **Estimated Effort:** 240 hours

#### Phase 3 (Weeks 13-18): Backend Development & Integration
- .NET 8 API development (controllers, services, models)
- Azure Functions upgrade to .NET 8
- TLS 1.2 configuration and enforcement
- EVO PDF integration and testing
- SFTP integration updates
- Database integration with CosmosDB
- API integration with React frontend
- **Estimated Effort:** 180 hours

#### Phase 4 (Weeks 19-22): Comprehensive Testing & Deployment
- End-to-end testing of complete application
- Performance optimization and load testing
- Security testing and vulnerability scanning
- User acceptance testing
- Production deployment and monitoring
- **Estimated Effort:** 120 hours

### Cost Impact:
- **Development:** ~660 hours (22 weeks at 30 hours/week)
- **Monthly Savings:** $1500-2000 CAD
- **ROI:** 11-15 months

### Pros:
✅ Fully aligned with EBS technology stack
✅ Modern, long-term sustainable architecture
✅ Significant cost reduction
✅ No future conversion needed for EBS merger
✅ Latest security patches and features

### Cons:
❌ **MASSIVE development effort** (660 hours = 5+ months full-time)
❌ **Complete application rewrite** - everything rebuilt from scratch
❌ Higher risk due to complete rewrite
❌ **Significantly longer timeline** to realize benefits
❌ **Severe over-engineering** for current business needs
❌ Extensive testing required for entirely new application
❌ **Poor ROI** (11-15 months payback)

---

## Option 3: Hybrid Approach

### Approach:
Upgrade backend to .NET 8 while keeping Angular 12, with optional React conversion later.

### Implementation Timeline: 18-22 weeks (30 hours/week)

### Phase 1: Backend Modernization (12-14 weeks)
- .NET Core 2.1 → .NET 8 (major version jump)
- Azure Functions → .NET 8 (all 3 functions)
- SQL Server → CosmosDB migration
- TLS 1.2 configuration
- EVO PDF implementation and testing
- **Estimated Effort:** 360-420 hours

### Phase 2: Frontend Minimal Upgrade (6-8 weeks)
- Angular 6.1.5 → Angular 18 (Current LTS)
- Address SNYK vulnerabilities
- Handle massive breaking changes from 6+ major versions
- Update dependencies and fix architectural changes
- **Estimated Effort:** 180-240 hours

### Optional Phase 3: React Conversion (When EBS merger is confirmed)
- **Complete Angular to React rewrite** (8-10 weeks)
- All forms, validation, UI components rebuilt
- Align with EBS timeline
- **Estimated Effort:** 240-300 hours

### Implementation Timeline: 12-16 weeks (Phases 1-2)

### Cost Impact:
- **Initial Development:** ~540-660 hours (18-22 weeks)
- **React Conversion (later):** ~240-300 hours (8-10 weeks)
- **Monthly Savings:** $1500-2000 CAD
- **ROI:** 9-11 months

### Pros:
✅ Balanced approach
✅ Immediate cost benefits
✅ Flexibility for future decisions
✅ Modern backend architecture
✅ Reduced risk compared to full rewrite

### Cons:
❌ Potential double work if React conversion needed
❌ Still not fully aligned with EBS initially
❌ **Longer overall timeline** (14-17 weeks + future React work)
❌ **Higher total cost** if React conversion eventually needed

---

## Database Migration Analysis: SQL Server vs CosmosDB

### Current SQL Database:
- **Tables:** 5 (Application, Rates, Dependent, Transaction, + 1 more)
- **Volume:** <1000 records total
- **Operations:** Mostly CRUD, simple queries
- **Cost:** High (part of $3000/month)

### CosmosDB Migration Benefits:
- **Cost Reduction:** 60-80% savings for this volume
- **Scalability:** Better for future growth
- **Performance:** Faster for document-style operations
- **Maintenance:** Reduced administrative overhead

### Migration Considerations:
- **Effort:** Medium (40-60 hours)
- **Risk:** Low (simple data model)
- **Complexity:** Straightforward mapping
- **Testing:** Required but manageable

---

## Recommendation: Option 1 (Incremental Updates)

### Rationale:

Given your specific context:
- **Low business criticality**
- **Minimal change requirement**
- **High current costs**
- **Uncertain EBS merger timeline** 
- **Small, stable user base**

**Option 1 provides the best balance of:**
- ✅ Immediate cost relief ($18K-24K CAD annual savings)
- ✅ SNYK vulnerability resolution
- ✅ Minimal risk and disruption
- ✅ Quick implementation (6-8 weeks)
- ✅ Maintains EBS merger flexibility

### Implementation Priority:
1. **CosmosDB Migration** (immediate cost impact)
2. **.NET 6 Upgrade** (security + LTS)
3. **TLS 1.2 Configuration** (security compliance)
4. **EVO PDF Integration** (licensing requirement)
5. **Angular 12 Upgrade** (security + LTS)

### Future State Decision Tree:
- **If EBS merger confirmed within 12 months:** Convert to React then
- **If EBS merger delayed 2+ years:** Stay with Angular 12 until merger
- **If EBS merger cancelled:** Continue with current stack

---

## Risk Assessment

### Option 1 Risks (LOW):
- **Technical:** Minimal breaking changes expected
- **Timeline:** Well-established upgrade paths
- **Cost:** Predictable savings
- **Business:** Low impact on operations

### Mitigation Strategies:
- Thorough testing in staging environment
- Gradual rollout approach
- Rollback plan prepared
- Monitor cost savings realization

---

## Success Metrics

### Technical:
- ✅ Zero SNYK high/critical vulnerabilities
- ✅ TLS 1.2 enforced across all components
- ✅ All components on LTS versions
- ✅ EVO PDF successfully integrated
- ✅ Application functionality unchanged

### Financial:
- ✅ 50%+ reduction in monthly Azure costs
- ✅ ROI achieved within 3 months
- ✅ CosmosDB costs <$200 CAD/month

### Operational:
- ✅ No disruption to admin workflows
- ✅ SFTP processes unchanged
- ✅ Performance maintained or improved

---

## Additional Considerations Not to Miss

### Security & Compliance:
- **TLS 1.2 Configuration:** Update Azure App Service, SQL connections, SFTP, and API calls
- **SNYK Vulnerability Remediation:** Track and verify all high/critical issues resolved
- **Health Data Protection:** Ensure encryption at rest and in transit maintained

### Azure Function Specifics:
- **Function 1:** 30-minute schedule - ensure efficient processing and error handling
- **Function 2:** Daily cleanup - verify data retention compliance (14-day rule)
- **Function 3:** Weekly CSV generation - maintain transaction history reporting format

### Integration Points:
- **SFTP Configuration:** Test file transfer functionality post-upgrade
- **PDF Generation:** Ensure EVO PDF maintains same format/layout as iText
- **CSV Format:** Verify admin team can still process generated files
- **Application Insights:** Update monitoring and logging for new versions

### Performance Considerations:
- **CosmosDB Query Optimization:** Design partition keys for efficient queries
- **Azure Function Cold Start:** Consider premium plan if startup time becomes issue
- **File Generation Performance:** Monitor PDF/CSV generation times
- **Concurrent User Handling:** Test 100+ simultaneous users during peak periods

### Rollback Strategy:
- **Database Backup:** Full SQL backup before CosmosDB migration
- **Application Versioning:** Blue-green deployment capability
- **Configuration Rollback:** Maintain previous TLS and function settings
- **Monitoring Setup:** Real-time alerts for errors or performance degradation

### Testing Requirements:
- **End-to-End Testing:** Complete application flow from submission to SFTP transfer
- **Cross-Browser Testing:** Ensure Angular 12 compatibility
- **Load Testing:** Verify performance with expected user volumes
- **Security Testing:** Vulnerability scanning post-upgrade
- **Admin Workflow Testing:** Ensure SFTP files are correctly processed by admin team

## Assumptions

1. **Cost Reduction:** CosmosDB + optimized hosting = 50-70% cost savings
2. **Timeline:** Standard upgrade paths without major blockers
3. **EBS Merger:** Timeline remains uncertain (1-3 years)
4. **Resources:** Development team available for focused sprint work
5. **Testing:** Existing functionality can be validated efficiently
6. **Dependencies:** No hidden integrations or dependencies
7. **Work Schedule:** 6 hours/day, 5 days/week = 30 hours/week
8. **Admin Process:** Current SFTP workflow and file formats remain unchanged
9. **User Volume:** Stays consistent at ~100 daily users
10. **Database Size:** Remains small (<1000 records) making CosmosDB ideal

---

## Next Steps

1. **Approve recommended approach** (Option 1)
2. **Allocate development resources** (330 hours over 10-12 weeks)
3. **Set up development/staging environments**
4. **Begin with CosmosDB migration** (immediate cost impact)
5. **Execute phased implementation plan**
6. **Monitor cost savings and performance**
7. **Reassess EBS merger timeline** in 12 months

---

**Document Version:** 1.0  
**Last Updated:** May 22, 2025  
**Next Review:** After implementation completion
